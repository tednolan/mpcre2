#!/usr/bin/tclsh8.6
package require tcltest
namespace import ::tcltest::*

#
# This short function simply sets the plugin environment variable
# and invokes mumps to run the desired ".m" file. (Which is
# actually specified without the trailing ".m")
#
proc mexec {mfile} {
	global env

	set env(GTMXC) "../mpcre2.xc"
	set env(MPCRE2_SRC) ".."
	if {! [info exists env(gtmroutines)]} {
		set env(gtmroutines) "."
	} else {
		set env(gtmroutines) ". $env(gtmroutines)"
	}
	set res [exec mumps -run $mfile]
	return $res
}
 
test pcre2compile {
    Test: Compiling regular expressions
} -body {
    mexec pcre2compile
} -result 0

test pcre2geterrormessage {
    Test: Getting error strings from error codes
} -body {
    mexec pcre2geterrormessage
} -result 0

test pcre2codefree {
    Test: Free storage for a compiled RE
} -body {
    mexec pcre2codefree
} -result 0

test pcre2matchdatacreatefrompattern {
    Test: Create a match data block from a compiled RE
} -body {
    mexec pcre2matchdatacreatefrompattern
} -result 0

test pcre2match {
    Test: Match a subject string against an RE
} -body {
    mexec pcre2match
} -result 0

test pcre2dfamatch {
    Test: Match a subject string against an RE with an alternate algorithm
} -body {
    mexec pcre2dfamatch
} -result 0
 
test pcre2matchdatafree {
    Test: Free a match data block
} -body {
    mexec pcre2matchdatafree
} -result 0
 
test pcre2substitute {
    Test: Substitute for a matched pattern
} -body {
    mexec pcre2substitute
} -result 0

test pcre2jitcompile {
    Test: Compile a regular expression in JIT mode
} -body {
    mexec pcre2jitcompile
} -result 0

test pcre2getmark {
    Test: Get MARK, PRUNE, or *THEN names from match block
} -body {
    mexec pcre2getmark
} -result 0
 
test pcre2getstartchar {
    Test: Get first character position of a match
} -body {
    mexec pcre2getstartchar
} -result 0

test pcre2matchdatacreate {
    Test: Create PCRE2 match data from a compiled regex
} -body {
    mexec pcre2matchdatacreate
} -result 0

test pcre2getovectorcount {
    Test: Return number of offset pairs in match data
} -body {
    mexec pcre2getovectorcount
} -result 0
 
test pcre2getovectorpointer {
    Test: Get pointer to match output vector
} -body {
    mexec pcre2getovectorpointer
} -result 0
 
test pcre2getovpair {
    Test: Get match data output vector pairs
} -body {
    mexec pcre2getovpair
} -result 0

test pcre2getgeneralcontext {
    Test: Get the PCRE2 default general context
} -body {
    mexec pcre2getgeneralcontext
} -result 0
 
test pcre2generalcontextcreate {
    Test: Create a PCRE2 general context
} -body {
    mexec pcre2generalcontextcreate
} -result 0
 
test pcre2generalcontextcopy {
    Test: Copy a PCRE2 general context
} -body {
    mexec pcre2generalcontextcopy
} -result 0

test pcre2generalcontextfree {
    Test: Free a PCRE2 general context
} -body {
    mexec pcre2generalcontextfree
} -result 0
 
test pcre2compilecontextcreate {
    Test: Create a PCRE2 compile context
} -body {
    mexec pcre2compilecontextcreate
} -result 0
 
test pcre2compilecontextcopy {
    Test: Copy a PCRE2 compile context
} -body {
    mexec pcre2compilecontextcopy
} -result 0
 
test pcre2compilecontextfree {
    Test: Free a PCRE2 compile context
} -body {
    mexec pcre2compilecontextfree
} -result 0
 
test pcre2setbsr {
    Test: Set convention for \R processing
} -body {
    mexec pcre2setbsr
} -result 0

test pcre2maketables {
    Test: Builds set of character tables for character code points that are less than 256
} -body {
    mexec pcre2maketables
} -result 0

test pcre2setcharactertables {
    Test: Sets pointer to custom character tables
} -body {
    mexec pcre2setcharactertables
} -result 0
 
test pcre2setcompileextraoptions {
    Test: Sets additional  option bits for pcre2compile
} -body {
    mexec pcre2setcompileextraoptions
} -result 0

test pcre2setmaxpatternlength {
    Test: Sets the maximum text length of the pattern that can be compiled
} -body {
    mexec pcre2setmaxpatternlength
} -result 0


test pcre2setnewline {
    Test: Sets the newline convention within a compile context
} -body {
    mexec pcre2setnewline
} -result 0
 
test pcre2setparensnestlimit {
    Test: Set, in a compile context, the maximum depth of nested parentheses in a pattern
} -body {
    mexec pcre2setparensnestlimit
} -result 0

test pcre2setcompilerecursionguard {
    Test: Placeholder test for currently untestable set recursion guard function
} -body {
    mexec pcre2setcompilerecursionguard
} -result 0

test pcre2matchcontextcreate {
    Test: Create and initializes a new match context
} -body {
    mexec pcre2matchcontextcreate
} -result 0
 
test pcre2matchcontextcopy {
    Test: Copy a match context
} -body {
    mexec pcre2matchcontextcopy
} -result 0
 
test pcre2matchcontextfree {
    Test: Free a match context
} -body {
    mexec pcre2matchcontextfree
} -result 0
 
test pcre2setcallout {
    Test: Set a callout function
} -body {
    mexec pcre2setcallout
} -result 0
 
test pcre2setoffsetlimit {
    Test: Set the offset limit field in a match context
} -body {
    mexec pcre2setoffsetlimit
} -result 0

test pcre2setheaplimit {
    Test: Set the backtracking heap limit field in a match context
} -body {
    mexec pcre2setheaplimit
} -result 0

test pcre2setmatchlimit {
    Test: Set the match limit field in a match context
} -body {
    mexec pcre2setmatchlimit
} -result 0
 
test pcre2setdepthlimit {
    Test: Set the backtracking depth limit field in a match context
} -body {
    mexec pcre2setdepthlimit
} -result 0
 
test pcre2substringcopybyname {
    Test: Extract a captured substring, identified by name, into a given buffer
} -body {
    mexec pcre2substringcopybyname
} -result 0

test pcre2substringcopybynumber {
    Test: Extract a captured substring, identified by number, into a given buffer
} -body {
    mexec pcre2substringcopybynumber
} -result 0
 
test pcre2substringgetbyname {
    Test: Extract a captured substring, identified by name, into a new buffer
} -body {
    mexec pcre2substringgetbyname
} -result 0
 
test pcre2substringgetbynumber {
    Test: Extract a captured substring, identified by number, into a new buffer
} -body {
    mexec pcre2substringgetbynumber
} -result 0

test pcre2getmstringfrombuf {
    Test: Get an M string from a C buffer
} -body {
    mexec pcre2getmstringfrombuf
} -result 0
 
test pcre2substringfree {
    Test: Free a C buffer with a newly allocated substring
} -body {
    mexec pcre2substringfree
} -result 0
 
cleanupTests
